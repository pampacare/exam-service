datasource db {
  provider          = "postgresql"
  url               = "postgres://gtkpyoaodioeco:03f3bfdc883609f6fdaee8d1244cc0efa7795cf943462f605d6e206b96c17fb8@ec2-54-146-84-101.compute-1.amazonaws.com:5432/d65vmblnjsiefd"
  shadowDatabaseUrl = "postgres://zpfhhjftzcwyjx:ba94957fd5998bf446952fb5ffe12f1d9b491b91a5d3a0d59ead96e0098fb7ed@ec2-54-204-148-110.compute-1.amazonaws.com:5432/df69icumrfcph2"
}

generator client {
  provider = "prisma-client-js"
}

model exam {
  id               Int                @id @default(autoincrement())
  timestamp        DateTime
  observation      String?
  lvc              Boolean
  dog_id           String
  test             test[]
  treatment        treatment[]
  symptom_has_exam symptom_has_exam[]
}

model test_type {
  id   Int    @id @default(autoincrement())
  name String
  test test[]
}

model test {
  id           Int       @id @default(autoincrement())
  timestamp    DateTime
  exam         exam      @relation(fields: [exam_id], references: [id])
  exam_id      Int
  test_type    test_type @relation(fields: [test_type_id], references: [id])
  test_type_id Int
}

model treatment {
  id        Int      @id @default(autoincrement())
  type      String
  timestamp DateTime
  exam      exam     @relation(fields: [exam_id], references: [id])
  exam_id   Int
}

model symptom {
  id               Int                @id @default(autoincrement())
  description      String
  symptom_has_exam symptom_has_exam[]
}

model symptom_has_exam {
  symptom    symptom @relation(fields: [symptom_id], references: [id])
  symptom_id Int
  exam       exam    @relation(fields: [exam_id], references: [id])
  exam_id    Int

  @@id([symptom_id, exam_id])
}
